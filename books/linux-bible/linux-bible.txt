Linux Bible
The comprehensive tutorial resource 

Christopher Negus
Wiley

================================================================================
Part 1: Getting Started
================================================================================
Chapter 1: Starting with Linux
Chapter 2: Creating the Perfect Linux Desktop

--------------------------------------------------------------------------------
Chapter 1: Starting with Linux
--------------------------------------------------------------------------------
"The operating Systems war is over, and Linux has won."

Linux is a computer operating system. An operating system consists of the
software that manages your computer and lets you run applications on it.

Linux differs from other operating systems because it is open source.

On Monday, August 26, 1991 at 2:12:08 AM UTC-4, Linus Benedict Torvalds wrote:
  Hello everybody out there using minix -
 
  I'm doing a (free) operating system (just a hobby, won't be big and
  professional like gnu) for 386(486) AT clones. This has been brewing since
  april, and is starting to get ready. I'd like any feedback on things people
  like/dislike in minix, as my OS resembles it somewhat (same physical layout of
  the file-system (due to practical reasons) among other things).
 
  I've currently ported bash(1.08) and gcc(1.40), and things seem to work.  This
  implies that I'll get something practical within a few months, and I'd like to
  know what features most people would want. Any suggestions are welcome, but I
  won't promise I'll implement them :-)
 
  Linus (torv...@kruuna.helsinki.fi)
 
  PS. Yes - it's free of any minix code, and it has a multi-threaded fs.  It is
  NOT protable (uses 386 task switching etc), and it probably never will support
  anything other than AT-harddisks, as that's all I have :-(.

UNIX started as an open source operating system, but started selling UNIX by
1984.

In 1984, Richard M. Stallman started the GNU project (https://gnu.org),
recursively named by the phrase GNU is Not UNIX. GNU was intended to become a
recoding of the entire UNIX operating system that could be freely distributed.

Over time, the term free software has been mostly replaced by the term open
source soft- ware. The term free software is preferred by the Free Software
Foundation, while open source software is promoted by the Open Source Initiative

MacOS is built on a BSD derivative.

Today, Linux can be described as an open source UNIX-like operating system that
reflects a combination of SVID, POSIX, and BSD compliance.

A Linux distribution consists of the components needed to create a working Linux
system and the procedures needed to get those components installed and running.

--------------------------------------------------------------------------------
Chapter 2: Creating the Perfect Linux Desktop
--------------------------------------------------------------------------------
Mon 10 Jun 2024 01:41:10 PM -05

Nearly every major Linux distribution that offers desktop interfaces is based on
the X Window System originally from the X.Org Foundation. The X Window System
(sometimes simply called X) was created before Linux existed, and it even
predates Microsoft Windows.

A window manager adds the capability to manage the windows on your desktop and
often provides menus for launching applications and otherwise working with the
desktop.

Lightweight -> twm, fluxbox
Robust -> GNOME, KDE

Press Ctrl+Alt+Tab to display additional desktop areas to select.
Press Alt+F2 to display a command box. Type the name of the command that you
want to run into the box.

================================================================================
Part 2: Becoming a Linux Power User
================================================================================

--------------------------------------------------------------------------------
Chapter 3: Using the shell
--------------------------------------------------------------------------------
Tue 11 Jun 2024 05:09:18 PM -05

Before icons and windows took over computer screens, you typed commands to
interact with most computers. On UNIX systems, from which Linux was derived, the
program used to interpret and manage commands was referred to as the shell.

Other shells are available, including the C shell (csh), which is popular among
BSD UNIX users, and the Korn shell (ksh), which is popular among UNIX System V
users. Linux also has a tcsh shell (an improved C shell) and an ash shell
(another Bourne shell look-alike).

Many Linux system administrators use shell scripts to automate tasks such as
backing up data, monitoring log files, or checking system health.

$ -> Regular user
# -> Root user

Ctrl+Alt+F1 (or F2, F3, F4, and so on up to F6).

Newer systems, such as Fedora 29, now start the gdm (the login screen)
persistently on tty1 to allow multiple simultaneous GUI sessions: the gdm is on
tty1, the first desktop is started on tty2, the second desktop is started on
tty3, and so on.

Find out default login shell.
$ who am i
$ grep chris /etc/passwd

/home/kuervo:/bin/bash -> Deafult login shell

$ date
Tue Jun 11 11:26:56 PM -05 2024

$ hostname
fedora

Same command
$ ls -l -a -t
$ ls -lat

Whole words options
$ command --help

Argument
$ cat /etc/passwd

For full-word options, the argument often follows an equal sign (=)

$ ls --hide=Desktop

Information about current login session.

$ who -uH
NAME     LINE         TIME             IDLE          PID COMMENT
kuervo   seat0        2024-06-11 22:49   ?          2137 (login screen)
kuervo   :0           2024-06-11 22:49   ?          2137 (:0)

$ echo $PATH
/home/kuervo/.local/bin:/home/kuervo/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/kuervo/bin:/home/kuervo/bin

Some commands are built into the shell.

Determine location of a particular command
$ type bash
bash is /usr/bin/bash

$ locate hola
/home/kuervo/repos/arkham/src/Game.js

If no matches, run updatedb

If you prefer the vi command for editing shell command lines, you can easily
make that happen. Add the following line to the .bashrc file in your home
directory:

set -o vi

$ -> Shell completes the text with a variable from the current shell.
~ -> Shell completes with username.
@ -> Shell completes with hostname taken from /etc/hosts file.

Recall commands
$ history 2

!n -> Run command number
!! -> Run previous command
!?string? -> Run command containing string

fc followed by a history line number.

Ctrl-R -> Reverse incremental search
Ctrl-S -> Forward incremental search
Alt-P -> Reverse Search
Alt-N -> Forward Search

Disable HISTFILE 
Prevent storing a shell's history by killing it. 

$ kill -9 processID

Metacharacters -> |, &, ;, ), (, <, >

Pipe connects the output from one command to the input of another command.

$ cat /etc/passwd | sort | less

gunzip < /usr/share/man/man1/grep.1.gz | nroff -c -man | less

Sequential commands are separated with semicolons.

$ date ; troff -me -verylargedocument | lpr ; date

Background commands (&).

$ troff -me verylargedocument | lpr &

Expading commands
$(command) or `command`

vi $(find /home | grep xyzzy)

Expand arithmetic expressions

$[expression]
$(expression)

$ echo "There are $(ls | wc -w) files in this directory"

Expanding variables
$ ls -l $BASH

Shell variables
$SHELL -> Identifies the shell you are using
$PS1 -> Defines shell prompt
$MAIL -> Location of user's mailbox

See variables 
$ set

BASH=/bin/bash
...

Environment variables
$ env

SHELL=/bin/bash
...

$ alias p='pwd ; ls -CF'
$ alias rm='rm -i'

PS1 can be changed in .bashrc.

man -k passwd

chgpasswd (8)        - update group passwords in batch mode
chpasswd (8)         - update passwords in batch mode
...

Finding the ssh protocol
cat /etc/services | grep ssh

--------------------------------------------------------------------------------
Chapter 4: Moving Around the Filesystem
--------------------------------------------------------------------------------

One of the defining properties of the UNIX systems on which Linux is based is
that nearly everything you need to identify on your system (data, commands,
symbolic links, devices, and directories) is represented by items in the
filesystems.

In Linux, however, DOS command extensions such as .com, .exe, and .bat donâ€™t
necessarily signify an executable. (Permission flags make Linux files
executable)

cd -> Changes to another directory.
pwd -> Prints the name of the current (or present) working directory.
mkdir -> Creates directory.
chmod -> Changes the permission on a file or directory.
ls -> Lists the contents of a directory.

File-matching metacharacters
* -> Matches any number of characters.
? -> Matches any one character.
[...] -> Matches any one of the characters between the brackets, which can
         include a hyphen separated range of letters or number.

Create empty files
$ touch

< -> Directs the contents of a file to the command. 
less bigfile <-> less < bigfile

> -> Directs the standard output of a command to a file. Overwrites.

2> -> Directs standard error (error messages) to the file.

&> -> Directs both standard output and standard error to the file.

>> -> Directs the output of a command to a file, adding the output to the end of
      the existing file.

$ mail root < ~/.bashrc
$ man chmod | col -b > /tmp/chmod
$ echo "I finished the project on $(date)" >> ~/projects

<< -> Here text.

Brace expansion

$ touch memo{1,2,3,4,5}
$ touch {a..f}{1..5}

Append file-type indicators.
$ ls -F

List all files by time most recently modified
$ ls -at

Exclude files beginning with the letter g in the list:
$ ls --hide=g*

To list info about a directory instead of the files it contains:
$ ls -ld $HOME/test/

Create multiple directory layers (-p is needed)
$ mkdir -p $HOME/test/documents/memos/

List files and directories recursively from current directory down:
$ ls -R

List files by size:
$ ls -S

- Regular file
d Directory
l Symbolic link
b Block device
c Character device
s Socket
p Named pipe

# chmod
r=4
w=2
x=1

chmod recursive

$ chmod -R 755 $HOME/myapps

chmod (letters)
u, user
g, group
o, other
a, all

$ chmod a-w file
$ chmod o-x file
$ chmod go-rwx file
$ chmod u+rw

Change file ownership
# chown joe /home/joe/memo.txt
# ls -l /home/joe/memo.txt

Change user and group
# chown joe:joe /home/joe/memo.txt
# ls -l /home/joe/memotxt

chown may be recurive with -R

Run command unaliased
$ \command

--------------------------------------------------------------------------------
Chapter 5: Working with Text Files
--------------------------------------------------------------------------------
Thu Jun 13 10:33:44 PM -05 2024

Ctrl+G -> Displays the name of the file that you are editing in vim

locate -> Searches database.
find -> Searches the whole filesystem.

locate -i -> Regardless of case.

find [directory] -ls -> Long listing

# find /etc -name passwd
# find /etc -iname '*passwd*'

Search for files that are exactly smaller than, or larger than a selected size.
find /usr/share/ -size +10M
find /mostlybig -size -1M
find /bigdata -size +500M -size -5G -exec du -sh {} \;

Searching by user or group

$ find /home -user chris -ls
$ find /home \( -user chris -or -user joe \) -ls
$ find /etc -group ntp -ls
$ find /var/spool -not -user root -ls

Finding by permission

$ find /usr/bin -perm 755 -ls -> Exactly rwxr-xr-x
$ find /home/chris/ -perm -222 -type d -ls -> Only files that have write
permission

$ find /myreadonly -perm /222 -type f
$ find . -perm -002 -type f -ls

Finding by date and time

10 minutes ago
$ find /etc/ -mmin -10

Past 3 days
$ find /bin /usr/bin /sbin /usr/sbin -ctime -3

300+ days no changes
$ find /var/ftp /var/www -atime +300

Not and or finding files

$ find /var/allusers \( -user joe -o -user chris \) -ls
$ find /var/allusers -user joe -not -group joe -ls
$ find /var/allusers -user joe -and -size +1M -ls

$ find [options] -exec command {} \; -> Executes command for all matches
$ find [options] -ok command {} \; -> Asks for each match 

$ find /etc -iname passwd -exec echo "I found {}" \;
$ find /usr/share -size +5M -exec du {} \; | sort -nr
# find /var/allusers/ -user joe -ok mv {} /tmp/joe/ \;

Grepping

$ grep desktop /etc/services
$ grep -i desktop /etc/services

Not containing is the -v option

$ grep -vi tcp /etc/services

-r option for recursive search. -l lists files that include the string.

$ grep -rli peerdns /usr/share/doc/

Color

$ grep -ri --color root /etc/sysconfig/

$ ip addr show | grep inet 

--------------------------------------------------------------------------------
Chapter 6: Managing Running Processes
--------------------------------------------------------------------------------
Fri Jun 14 11:20:56 PM -05 2024

The most common utility for checking running processes.
$ ps 
$ ps u
$ ps ux | less
$ ps -eo pid,user,uid,group,gid,vsz,rss,comm | less
$ ps -eo pid,user,group,gid,vsz,rss,com --sort=-vsz | head

Display processes with top
$ top

h -> help options.
M -> to sorty by memory usage instad of CPU.
1 -> toggle showing CPU usage of all CPU.
R -> reverse sort output
u -> enter username to display processes only for tha user.

vim CTRL-L re-draws the screen

Background processes
$ find /usr > /tmp/allusrfiles &
[3] 15971
[job number] PID

Display jobs
$ jobs

Foreground and background commands
$ fg %1

% -> Refers to the most recent command put into the backgroudn (indicatedby the
     plus sign when you type the jobs command). This action brings the command to the
     foreground.

%string -> Refers to a job where the command begins with a particular string of
           characters. The string must be unambiguous. (In other words, typing %vi when
           there are two vi commands in the background results in an error message)

%?string -> Refers to a job where the command line contains a string at any
            point. The string must be unambiguous or the match fails.

%-- -> Refers to the job stopped beforethe one most recently stopped.

If a command is stopped, you can start it running again in the background using
the bg command. 

$ bg %5

9 -> SIGKILL
15 -> SIGTERM
1 -> SIGHUP

man 7 signal to read about other available signals.

SIGHUP -> 1
SIGINT -> 2
SIGQUIT -> 3
SIGABRT -> 6
SIGKILL -> 9
SIGTERM -> 15
SIGCONT -> 19,18,25
SIGSTOP -> 17,19,23

$ kill 10432
$ kill -15 10432
$ kill -SIGKILL 10432

Restart the shell

# kill -1 1833

killall command can be particularly useful if you want to kill a bunch of
commands of the same name

# killall -HUP gnome-shell

The nicer a process is, the less CPU attention it gets.

# nice -n +5 updatedb &
# renice -n -5 20284

--------------------------------------------------------------------------------
Chapter 7: Managing Running Processes
--------------------------------------------------------------------------------
Sat 15 Jun 2024 10:59:35 PM -05

A shell script is a group of commands, functions, variables, or just about
anything else you can use from a shell.

#!/bin/bash
chmod +x filename
$ bash myscript

# -> Comment

$ bash -x myscript -> Read executed commands.

Variables

NAME=value
CITY="Springfield"
PI=3.14159265

MYDATE=$(date)

echo '$HOME * `date`' -> $HOME * `date`
echo "$HOME * `date`" -> /home/kuervo * Sat Jun 15 11:20:07 PM -05 2024
echo $HOME * `date` -> /home/kuervo books college courses README.md usr_man.txt Sat Jun 15 11:20:40 PM -05 2024

BALANCE="$CurBalance"

Shell positional parameters
#!/bin/bash
echo "The first argument is $1, the second is $2."
echo "The command itself is called $0."
echo "There are $# parameters on your command line."
echo "Here are all the arguments: $@."

$? -> exit status of the last command executed.

#!/bin/bash
read -p "Type something" var
echo "$var"

${var:-value}: If variable is unset or empty, expand this to value.
${var#pattern}: Chop the shortest match for pattern from the front of var's
                value
${var##pattern}: Chop the longest match for pattern from the fron of var's
                 value.
${var%pattern:} Chop the shortest...
${var%%pattern:} Chop the longest...

bc command is a calculator application that is available in most Linux
distributions.

$ I=0
$ echo "The value of I after increment is $((++I))"
$ $((I++)) -> Increment before

VARIABLE=1
if [ $VARIABLE -eq 1 ] ; then (= can be used, -eq for numbers tho')
  echo "The variable is 1"
fi

STRING="Friday"
if [ $STRING = "Friday" ] ; then
  echo "Woo. Friday."
else
  echo "Will Friday ever get here?"
fi

There's also elif and !=

if [ -f "$filename" ] ; then
  echo "file"
elif [ -d "filename" ] ; then
  echo "directory"
else
  echo "I have no idea"
fi

Operators for Test Expressions. Check Table 7.1.

# Perform simple single command if test is false
# [test] || action

# Perform simple single command if test is true
# [test] && action

case "VAR" in 
  Result1)
    { body };;
  Result2)
    { body };;
  Resultn)
    { body };;
  *)
    { body };;
esac

for VAR in LIST
do
  {body}
done

for NUMBER in 0 1 2 3 4 5 n
do 
  echo The number is $NUMBER
done

for FILE in `/bin/ls`
do
  echo $FILE
done

while condition
do
  { body }
done

until condition
do
  { body }
done

Combine Bash with grep, cut, tr, awk, and sed.

grep -> general regular expression print

$ grep [expression] [file]

$ env | grep ^HO

cut
$ grep /home /etc/passwd | cut -d':' -f6 -

tr
$ echo $FOO | tr [A-Z] [a-z]

for file in * ; do
  f=`echo $file | tr [:blank:] [_]`
  [ "$file" = "$f" ] || mv -i -- "$file" "$f"
done

sed
$ sed -n '/home/p' /etc/passwd
$ sed 's/Mac/Linux/g' somefile.txt > fixed_file.txt
Same result
$ cat somefile.txt | sed 's/Mac/Linux/g' > fixed_file.txt
Replacing with nothing
$ cat somefile.txt | sed 's/ *$//' > fixed_file.txt
