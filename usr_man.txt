================================================================================
Commands
================================================================================

pu=strftime('%c') -> Current time

================================================================================
usr_01
================================================================================

Press CTRL-] to jump to a subject under the cursor.
Press CTRL-O to jump back (repeat to go further back)

================================================================================
usr_02
================================================================================

The "J" command joins a line break. 
press CTRL-D to show all available topics and TAB to complete
Move between visual selection ends v_o

If you need to know everything about regular expressions, start reading at:  
  :help pattern.txt

Vim Script is available at  
  :help eval.txt

i_CTRL-J -> Moves downwards adding no lines.
i_CTRL-M -> Moves downwards adding new lines.
i_CTRL-R -> insert the contents of a register.
i_CTRL-H -> delete the character before the cursor.
i_CTRL-W -> delete word before the cursor.
i_CTRL-U -> delete all entered characters in the current line.
i_CTRL-T -> insert one shiftwidth of indent in front of the current line. *
i_CTRL-D -> delete one shiftwidth of indent in front of the current line. *
:r! {command} -> insert the standard output of {command} below the cursor. *

>> -> Indent *
<< -> delete indent *

v_J -> join the highlighted lines
gJ -> but without inserting spaces

Voy en Q_cm -> copying and moving text <- Pay attention here. We're reading this

================================================================================
usr_03
================================================================================

^	-> Moves the cursor	to first non-blank character in the line
f{char} -> Moves the cursor to the Nth occurrence of {char} to the right
F{char}	-> Moves the cursor to the Nth occurrence of {char} to the left
T{char} -> Moves the cursor	till before the Nth occurrence of {char} to the left

================================================================================
usr_04
================================================================================

dd -> deletes a whole line.
cc -> changes a whole line.

x -> dl (delete character under the cursor)
X -> dh (delete character left of the cursor)
D -> d$ (delete to end of the line) *
C -> c$ (change to end of the line) *
s -> cl (change one character)
S -> cc (change a whole line)

CTRL-V -> Vertical visual mode

v_o -> goes to the other end. (o as in other end)

v_O -> goes to opposite corner (useful in block selection)

yy -> yanks a whole line
Y -> yanks to the end of the line
daw -> delete a word

You can find a long list of text objects here: :help text-objects.

================================================================================
usr_05
================================================================================

I believe it is better to read the documentation for lazy.nvim. It takes care of
all of this. I also have to read the documentation for nvim and plugins and Lua
support. Still a long way to go.

================================================================================
usr_06
================================================================================

You can write your own syntax file, see mysyntaxfile.
I believe I have to read about TreeSitter, nvChad is most likely using
TreeSitter exclusively.

================================================================================
usr_07
================================================================================

:edit! or :e! -> Discard changes
nvim one.c two.c three.c -> Opening more than one file
:args -> See opened files
:next -> Next buffer.
:previous -> Previou buffer.
:last -> Last buffer.
:first -> First buffer.
:2next -> Motions can be used with next and previous commands.

:set autowrite -> Sets automatically writing when changing buffers.
:set noautowrite -> Disables automatically writing when changing buffers.

:args file1.txt file2.txt -> :args also adds more files.
:args *.txt -> One can use a wildcard, too.
CTRL-^ -> To quickly jump between two files.

`" -> Position where the cursor was when you left the file.
`. -> Position where you made the last change

`{letter} -> Takes one to the exact position.
'{letter} -> Takes one to the beginning of the line.

[Note]: Marks are local to the file. 

50%mF -> Marks with an uppercase letter are global marks.
:marks {argument1}{argument2}...{argumentn} -> Check information for the marks.
CTRL-O & CTRL-I to jump between files without placing marks.

:set backup -> Create backup files.

:write >> logfile -> Appending the content of the file to the end of the file.

vim -R file -> Open file read only.
view file -> read only [for UNIX systems].
[Note] You can still write changes using w!

vim -M file -> Forbid making changes completely.

:saveas -> Fill in the details. *
:file -> Fill in the details. *

================================================================================
usr_08
================================================================================

:split [file] -> Split a window to another file
:new -> Open a window on a new, empty file
CTRL-W + -> Increase the size of a window
CTRL-W - -> Decrease the size of a window
:vsplit -> Make the window appear at the left side
:vnew -> Open a vertically split window on a new, empty file.  
CTRL-W t ->	move to the TOP window
CTRL-W b-> move to the BOTTOM window

CTRL-W K -> move window to the top
CTRL-W H ->	move window to the far left
CTRL-W J ->	move window to the bottom
CTRL-W L ->	move window to the far right

:qall -> quit all (buffers and windows)
:wall -> Write all files
:wqall -> Write all files and quit all windows
:qall! -> Write all changes without saving

vim -o one.txt two.txt three.txt -> Opens a window for every file
(Use -O to get vertically split windows)

nvim -d [file1] [file2] -> Start Nvim in diff mode

zo -> Open fold *
zc -> Close fold *

:vertical diffsplit [file] -> [Inside Nvim] Open diff mode with a file.

:set noscrollbind -> unbind scrolling files in diff mode.

]c -> Jump forward to the next change. *
[c -> Jump to the last change. *
[Note] Prepended a count to jump further away.

:diffupdate -> Updates differences in windows. *

dp -> diff put.
do -> diff obtain.

For details about diff mode, see |diff-mode|.

":tag" jumps to a tag, ":stag" splits the window.  

:leftabove {cmd} ->	left or above the current window
:aboveleft {cmd} ->	idem
:rightbelow {cmd} -> right or below the current window
:belowright {cmd} -> idem
:topleft {cmd} ->	at the top or left of the Vim window
:botright {cmd} -> at the bottom or right of the Vim window
:splitbelow -> Splits the command to a window below.
:splitright -> Splits the command to a window to the right.

:tabedit [file] -> Opens a new tab with file 
:tab split -> Makes a new tab page with one window that is editing the same
buffer as the window we were in.

:tab help gt -> Show the help text for "gt" in a new tab page.

================================================================================
usr_09
================================================================================

You can tune the way Select mode works with the selectmode option.

================================================================================
usr_10 Making big changes
================================================================================

. -> repeats the preceding change.

q{register} -> records keystrokes into {register}[must be between a and z.].
@{registe} -> execute the macro. 
@@ -> execute last macro.
qC -> records to the c register and appends. Works for macros and text!

:[range]substitute/from/to/[flags] -> Substitute command.
:%s -> "%" specifies the command works on all lines.
:%s/Professor/Teacher/g -> g flag changes every occurrence on the line.

[Note: Combining % and g makes changes in the whole file].

p flag -> print out the last line it changes.
c flag -> ask for confirmation before it performs each substitution.

:1,5s/this/that/g -> number range. From line 1 to line 5 (included).
:54s/President/Fool/ -> Substitute in line 45.

:.write otherfile -> write only the current line into a file.
:.,$s/yes/no/ -> Substitute in the lines from the cursor to the end. 

[Note: % Is a short way to say 1,$, where $ represents the last line]

:?^Chapter?,/^Chapter/s=grey=gray=g -> Pattern in a range.
  :?^Chapter? -> Backwards search.
  :/^Chapter/ -> Forward search.

/Chapter/-1 -> -1 Offset.
/Chapter/+2 -> +2 Offset.
:.+3,$-5 -> Offset in beginning and end.

:'t,'b -> Using marks in a range.
:'<,'> -> Using visual selection in a range.
:'>,$ -> End of the visual selection to the end of the file.
:.,.+4 -> Typing "5:" converts to the equivalent range.

:g+//+s/foobar/barfoo/g -> Global command.

[
Note:
  Delimiters:
  /Pattern/
  =Pattern=
  Â¡Pattern!
  {Pattern}
  [Pattern]
  (Pattern)
  <Pattern>
  -Pattern-
]

CTRL+Q -> Enter visual block mode.
[Note: In visual block mode A inserts text in shorter lines while I does not.]
Visual mode c command -> Change all words.
Visual mode ~	command -> swap case	(a -> A and A -> a)
Visual mode U	command -> make uppercase  (a -> A and A -> A)
Visual mode u	command -> make lowercase  (a -> a and A -> a)
Visual mode r	command -> fill block with one character (rrrrrr)

[Note: If you want to include characters beyond the end of the line in the
block, check 'virtualedit']

Visual mode >	command -> shift selected text one shift amount.
Visual mode <	command -> removes one shift amount.

J -> joins all selected lines together into one line. Works in block and
visual modes.

gJ -> Won't alter the white spaces.

:read {filename} -> Appending file below the cursor. *

:0read {filename} -> Appeding file to the beginning of the file.

:.,$write tempo -> Writes from the cursor the end into the file "tempo".
:.,$write! tempo -> Overwrites tempo. (if error message)

:.write collection -> Writes the current line into the file collection.
:.write >>collection -> Appends the current line into the file collection.

:set textwidth=78 -> text is automatically trimmed to fit in the window.
gqap -> Reformat the current file to textwidth.

gq -> Format operator. *                  (I need to do more research about it!)

gU -> Change case to uppercase.
gu -> Change case to lowercase.
g~ -> Swap case.
gugu or guu -> Makes all file lowercase.
gUgU or GUU -> Makes all file uppercase.
g~g~ or g~~ -> Swaps case in the whole file.

!{motion}{program} -> Using external program.
!5G -> Filter from current line to 5.
!! -> Filter the current line through a filter.
!!date<CR> -> Replaces the current line with the output of 'date'.

[Note: Help with the use of the shell
'shell'
'shellcmdflag'
'shellquote'
'shellxquote'
'shellslash'
'shellredir'
]

:read !ls -> Unix: Appending the contents of the directory to the file.
:read !dir -> Windows: Appending the contents of the directory to the file.
:0read !date -u -> You can pass arguments!
:write !wc -> Unix command to count words, the text of the file is passed. 
CTRL-L -> To tell Vim to redraw the screen. 

================================================================================
usr_11
================================================================================

vim -r help.txt -> Open file in recovery mode.
vim -r "" -> If file had no name when crash happened. (Must be in the same dir)
vim -r .help.txt.swo -> Use the name of the swap file if you know it.
:recover -> Recovery mode.

Further reading
swap-file
:preserve
:swapname
updatecount
updatetime
directory

================================================================================
usr_12
================================================================================

:%s/\<four/4/g -> The \< item matches the start of a word.
:%s/four\>/4/g -> The \> item matches the end of a word.
:%s/\<four\>/4/g -> Match case.

