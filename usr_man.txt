================================================================================
Commands
================================================================================

pu=strftime('%c') -> Current time

================================================================================
usr_01
================================================================================

Press CTRL-] to jump to a subject under the cursor.
Press CTRL-O to jump back (repeat to go further back)

================================================================================
usr_02
================================================================================

The "J" command joins a line break. 
press CTRL-D to show all available topics and TAB to complete
Move between visual selection ends v_o

If you need to know everything about regular expressions, start reading at:  
  :help pattern.txt

Vim Script is available at  
  :help eval.txt

i_CTRL-J -> Moves downwards adding no lines.
i_CTRL-M -> Moves downwards adding new lines.
i_CTRL-R -> insert the contents of a register.
i_CTRL-H -> delete the character before the cursor.
i_CTRL-W -> delete word before the cursor.
i_CTRL-U -> delete all entered characters in the current line.
i_CTRL-T -> insert one shiftwidth of indent in front of the current line. *
i_CTRL-D -> delete one shiftwidth of indent in front of the current line. *
:r! {command} -> insert the standard output of {command} below the cursor. *

>> -> Indent *
<< -> delete indent *

v_J -> join the highlighted lines
gJ -> but without inserting spaces

Voy en Q_cm -> copying and moving text <- Pay attention here. We're reading this

================================================================================
usr_03
================================================================================

^	-> Moves the cursor	to first non-blank character in the line
f{char} -> Moves the cursor to the Nth occurrence of {char} to the right
F{char}	-> Moves the cursor to the Nth occurrence of {char} to the left
T{char} -> Moves the cursor	till before the Nth occurrence of {char} to the left

================================================================================
usr_04
================================================================================

dd -> deletes a whole line.
cc -> changes a whole line.

x -> dl (delete character under the cursor)
X -> dh (delete character left of the cursor)
D -> d$ (delete to end of the line) *
C -> c$ (change to end of the line) *
s -> cl (change one character)
S -> cc (change a whole line)

CTRL-V -> Vertical visual mode

v_o -> goes to the other end. (o as in other end)

v_O -> goes to opposite corner (useful in block selection)

yy -> yanks a whole line
Y -> yanks to the end of the line
daw -> delete a word

You can find a long list of text objects here: :help text-objects.

================================================================================
usr_05
================================================================================

I believe it is better to read the documentation for lazy.nvim. It takes care of
all of this. I also have to read the documentation for nvim and plugins and Lua
support. Still a long way to go.

================================================================================
usr_06
================================================================================

You can write your own syntax file, see mysyntaxfile.
I believe I have to read about TreeSitter, nvChad is most likely using
TreeSitter exclusively.

================================================================================
usr_07
================================================================================

:edit! or :e! -> Discard changes
nvim one.c two.c three.c -> Opening more than one file
:args -> See opened files
:next -> Next buffer.
:previous -> Previou buffer.
:last -> Last buffer.
:first -> First buffer.
:2next -> Motions can be used with next and previous commands.

:set autowrite -> Sets automatically writing when changing buffers.
:set noautowrite -> Disables automatically writing when changing buffers.

:args file1.txt file2.txt -> :args also adds more files.
:args *.txt -> One can use a wildcard, too.
CTRL-^ -> To quickly jump between two files.

`" -> Position where the cursor was when you left the file.
`. -> Position where you made the last change

`{letter} -> Takes one to the exact position.
'{letter} -> Takes one to the beginning of the line.

[Note]: Marks are local to the file. 

50%mF -> Marks with an uppercase letter are global marks.
:marks {argument1}{argument2}...{argumentn} -> Check information for the marks.
CTRL-O & CTRL-I to jump between files without placing marks.

:set backup -> Create backup files.

:write >> logfile -> Appending the content of the file to the end of the file.

vim -R file -> Open file read only.
view file -> read only [for UNIX systems].
[Note] You can still write changes using w!

vim -M file -> Forbid making changes completely.

:saveas -> Fill in the details. *
:file -> Fill in the details. *

================================================================================
usr_08
================================================================================


