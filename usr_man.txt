================================================================================
Commands
================================================================================

pu=strftime('%c') -> Current time
:set virtualedit=all -> Edit tables, no need for spaces

================================================================================
usr_01
================================================================================

Press CTRL-] to jump to a subject under the cursor.
Press CTRL-O to jump back (repeat to go further back)

================================================================================
usr_02
================================================================================

The "J" command joins a line break. 
press CTRL-D to show all available topics and TAB to complete
Move between visual selection ends v_o

If you need to know everything about regular expressions, start reading at:  
  :help pattern.txt

Vim Script is available at  
  :help eval.txt

i_CTRL-J -> Moves downwards adding no lines.
i_CTRL-M -> Moves downwards adding new lines.
i_CTRL-R -> insert the contents of a register.
i_CTRL-H -> delete the character before the cursor.
i_CTRL-W -> delete word before the cursor.
i_CTRL-U -> delete all entered characters in the current line.
i_CTRL-T -> insert one shiftwidth of indent in front of the current line. *
i_CTRL-D -> delete one shiftwidth of indent in front of the current line. *
:r! {command} -> insert the standard output of {command} below the cursor. *

>> -> Indent *
<< -> delete indent *

v_J -> join the highlighted lines
gJ -> but without inserting spaces

Voy en Q_cm -> copying and moving text <- Pay attention here. We're reading this

================================================================================
usr_03
================================================================================

^	-> Moves the cursor	to first non-blank character in the line
f{char} -> Moves the cursor to the Nth occurrence of {char} to the right
F{char}	-> Moves the cursor to the Nth occurrence of {char} to the left
T{char} -> Moves the cursor	till before the Nth occurrence of {char} to the left

================================================================================
usr_04
================================================================================

dd -> deletes a whole line.
cc -> changes a whole line.

x -> dl (delete character under the cursor)
X -> dh (delete character left of the cursor)
D -> d$ (delete to end of the line) *
C -> c$ (change to end of the line) *
s -> cl (change one character)
S -> cc (change a whole line)

CTRL-V -> Vertical visual mode

v_o -> goes to the other end. (o as in other end)

v_O -> goes to opposite corner (useful in block selection)

yy -> yanks a whole line
Y -> yanks to the end of the line
daw -> delete a word

You can find a long list of text objects here: :help text-objects.

================================================================================
usr_05
================================================================================

I believe it is better to read the documentation for lazy.nvim. It takes care of
all of this. I also have to read the documentation for nvim and plugins and Lua
support. Still a long way to go.

================================================================================
usr_06
================================================================================

You can write your own syntax file, see mysyntaxfile.
I believe I have to read about TreeSitter, nvChad is most likely using
TreeSitter exclusively.

================================================================================
usr_07
================================================================================

:edit! or :e! -> Discard changes
nvim one.c two.c three.c -> Opening more than one file
:args -> See opened files
:next -> Next buffer.
:previous -> Previou buffer.
:last -> Last buffer.
:first -> First buffer.
:2next -> Motions can be used with next and previous commands.

:set autowrite -> Sets automatically writing when changing buffers.
:set noautowrite -> Disables automatically writing when changing buffers.

:args file1.txt file2.txt -> :args also adds more files.
:args *.txt -> One can use a wildcard, too.
CTRL-^ -> To quickly jump between two files.

`" -> Position where the cursor was when you left the file.
`. -> Position where you made the last change

`{letter} -> Takes one to the exact position.
'{letter} -> Takes one to the beginning of the line.

[Note]: Marks are local to the file. 

50%mF -> Marks with an uppercase letter are global marks.
:marks {argument1}{argument2}...{argumentn} -> Check information for the marks.
CTRL-O & CTRL-I to jump between files without placing marks.

:set backup -> Create backup files.

:write >> logfile -> Appending the content of the file to the end of the file.

vim -R file -> Open file read only.
view file -> read only [for UNIX systems].
[Note] You can still write changes using w!

vim -M file -> Forbid making changes completely.

:saveas -> Fill in the details. *
:file -> Fill in the details. *

================================================================================
usr_08
================================================================================

:split [file] -> Split a window to another file
:new -> Open a window on a new, empty file
CTRL-W + -> Increase the size of a window
CTRL-W - -> Decrease the size of a window
:vsplit -> Make the window appear at the left side
:vnew -> Open a vertically split window on a new, empty file.  
CTRL-W t ->	move to the TOP window
CTRL-W b-> move to the BOTTOM window

CTRL-W K -> move window to the top
CTRL-W H ->	move window to the far left
CTRL-W J ->	move window to the bottom
CTRL-W L ->	move window to the far right

:qall -> quit all (buffers and windows)
:wall -> Write all files
:wqall -> Write all files and quit all windows
:qall! -> Write all changes without saving

vim -o one.txt two.txt three.txt -> Opens a window for every file
(Use -O to get vertically split windows)

nvim -d [file1] [file2] -> Start Nvim in diff mode

zo -> Open fold *
zc -> Close fold *

:vertical diffsplit [file] -> [Inside Nvim] Open diff mode with a file.

:set noscrollbind -> unbind scrolling files in diff mode.

]c -> Jump forward to the next change. *
[c -> Jump to the last change. *
[Note] Prepended a count to jump further away.

:diffupdate -> Updates differences in windows. *

dp -> diff put.
do -> diff obtain.

For details about diff mode, see |diff-mode|.

":tag" jumps to a tag, ":stag" splits the window.  

:leftabove {cmd} ->	left or above the current window
:aboveleft {cmd} ->	idem
:rightbelow {cmd} -> right or below the current window
:belowright {cmd} -> idem
:topleft {cmd} ->	at the top or left of the Vim window
:botright {cmd} -> at the bottom or right of the Vim window
:splitbelow -> Splits the command to a window below.
:splitright -> Splits the command to a window to the right.

:tabedit [file] -> Opens a new tab with file 
:tab split -> Makes a new tab page with one window that is editing the same
buffer as the window we were in.

:tab help gt -> Show the help text for "gt" in a new tab page.

================================================================================
usr_09
================================================================================

You can tune the way Select mode works with the selectmode option.

================================================================================
usr_10 Making big changes
================================================================================

. -> repeats the preceding change.

q{register} -> records keystrokes into {register}[must be between a and z.].
@{registe} -> execute the macro. 
@@ -> execute last macro.
qC -> records to the c register and appends. Works for macros and text!

:[range]substitute/from/to/[flags] -> Substitute command.
:%s -> "%" specifies the command works on all lines.
:%s/Professor/Teacher/g -> g flag changes every occurrence on the line.

[Note: Combining % and g makes changes in the whole file].

p flag -> print out the last line it changes.
c flag -> ask for confirmation before it performs each substitution.

:1,5s/this/that/g -> number range. From line 1 to line 5 (included).
:54s/President/Fool/ -> Substitute in line 45.

:.write otherfile -> write only the current line into a file.
:.,$s/yes/no/ -> Substitute in the lines from the cursor to the end. 

[Note: % Is a short way to say 1,$, where $ represents the last line]

:?^Chapter?,/^Chapter/s=grey=gray=g -> Pattern in a range.
  :?^Chapter? -> Backwards search.
  :/^Chapter/ -> Forward search.

/Chapter/-1 -> -1 Offset.
/Chapter/+2 -> +2 Offset.
:.+3,$-5 -> Offset in beginning and end.

:'t,'b -> Using marks in a range.
:'<,'> -> Using visual selection in a range.
:'>,$ -> End of the visual selection to the end of the file.
:.,.+4 -> Typing "5:" converts to the equivalent range.

:g+//+s/foobar/barfoo/g -> Global command.

[
Note:
  Delimiters:
  /Pattern/
  =Pattern=
  Â¡Pattern!
  {Pattern}
  [Pattern]
  (Pattern)
  <Pattern>
  -Pattern-
]

CTRL+Q -> Enter visual block mode.
[Note: In visual block mode A inserts text in shorter lines while I does not.]
Visual mode c command -> Change all words.
Visual mode ~	command -> swap case	(a -> A and A -> a)
Visual mode U	command -> make uppercase  (a -> A and A -> A)
Visual mode u	command -> make lowercase  (a -> a and A -> a)
Visual mode r	command -> fill block with one character (rrrrrr)

[Note: If you want to include characters beyond the end of the line in the
block, check 'virtualedit']

Visual mode >	command -> shift selected text one shift amount.
Visual mode <	command -> removes one shift amount.

J -> joins all selected lines together into one line. Works in block and
visual modes.

gJ -> Won't alter the white spaces.

:read {filename} -> Appending file below the cursor. *

:0read {filename} -> Appeding file to the beginning of the file.

:.,$write tempo -> Writes from the cursor the end into the file "tempo".
:.,$write! tempo -> Overwrites tempo. (if error message)

:.write collection -> Writes the current line into the file collection.
:.write >>collection -> Appends the current line into the file collection.

:set textwidth=78 -> text is automatically trimmed to fit in the window.
gqap -> Reformat the current file to textwidth.

gq -> Format operator. *                  (I need to do more research about it!)
gw -> Format operator when using lsp. *   (lsp uses a different operator)

gU -> Change case to uppercase.
gu -> Change case to lowercase.
g~ -> Swap case.
gugu or guu -> Makes all file lowercase.
gUgU or GUU -> Makes all file uppercase.
g~g~ or g~~ -> Swaps case in the whole file.

!{motion}{program} -> Using external program.
!5G -> Filter from current line to 5.
!! -> Filter the current line through a filter.
!!date<CR> -> Replaces the current line with the output of 'date'.

[Note: Help with the use of the shell
'shell'
'shellcmdflag'
'shellquote'
'shellxquote'
'shellslash'
'shellredir'
]

:read !ls -> Unix: Appending the contents of the directory to the file.
:read !dir -> Windows: Appending the contents of the directory to the file.
:0read !date -u -> You can pass arguments!
:write !wc -> Unix command to count words, the text of the file is passed. 
CTRL-L -> To tell Vim to redraw the screen. 

================================================================================
usr_11
================================================================================

vim -r help.txt -> Open file in recovery mode.
vim -r "" -> If file had no name when crash happened. (Must be in the same dir)
vim -r .help.txt.swo -> Use the name of the swap file if you know it.
:recover -> Recovery mode.

Further reading
swap-file
:preserve
:swapname
updatecount
updatetime
directory

================================================================================
usr_12
================================================================================

\< -> Item matches the start of a word.
:%s/\<four/4/g 

\> -> item matches the end of a word.
:%s/four\>/4/g

:%s/\<four\>/4/g -> Match case.

:%s/\<GetResp\>/GetAnswer/ge -> e flag ignores error if match is not found.

[Note: Substitute command flags
  g -> Global.
  c -> Confirm. (for each match)
  i -> Ignore case.
  I -> Case sensitive.
  n -> Counts.
  e -> Ignore errors.
]

see sub-replace-special.

:[selection]!sort -> Sorts the selection. Windows has sort! :0

:global/^/move 0 or :g/^/m 0 -> Reverse lines.
gCTRL-G -> Count words in file. *

K -> Invokes man to the selected word.
:Man csh -> Opens man page for csh.

When you have a Unix system, check section 12.6.

:%s/\s\+$// -> Remove whitespace at the end of every line.

vim `grep -l frame_counter *.c` -> Finds all c files containing frame_counter.
:grep error_string *.c -> Find all error_string in c files.

================================================================================
usr_20
================================================================================

The most often used keys to move around in the command line:

<Left> -> one character left
<Right> -> one character right
<S-Left> or <C-Left> ->	one word left
<S-Right> or <C-Right> ->	one word right
CTRL-B or <Home> ->	to begin of command line
CTRL-E or <End>	->	to end of command line
CTRL-W -> Deletes word.

CTRL-U -> removes all text

Insert key -> toggles inserting/replacing

CTRL-C or <Esc> -> exit command mode.

:set autoindent -> :set ai
You can find the full list of long and short names here: option-list.

Vim has context sensitive completion.

CTRL-D -> Shows all completion.

CTRL-L -> Completes the word to the longest unambiguous string.

The wildmode option can be used to change the way completion works.
The wildmenu option can be used to get a menu-like list of matches.
Use the suffixes option to specify files that are less important and appear
at the end of the list of files.
The wildignore option specifies files that are not listed at all.

More about all of this here: cmdline-completion

CTRL-P -> previous
CTRL-N -> next

q: -> command line history. You can change and execute commands in the q: window

================================================================================
usr_21
================================================================================

CTRL-Z or :suspend -> Get back to the shell.
fg -> Come back to nvim from the shell if CTRL-Z was used. 
  [Only Unix has support for this.]

:!{command} -> Execute a shell command.

:!{program}		execute {program} *
:r !{program}		execute {program} and read its output *
:w !{program}		execute {program} and send text to its input *
:[range]!{program}	filter text through {program} *

The ShaDa saves ->
  Command-line and Search pattern history
  Text in registers
  Marks for various files
  The buffer list
  Global variables

See the shada option and shada-file for more information.

'0 -> Mark for line where you exit.

:oldfiles -> List recently closed files.

:e #<2 -> Opens second file in the list.
:split #<3 -> Splits the screen with the third file in the list.

One can also press q after :oldfiles to select the file typing numbers

More info at :oldfiles, v:oldfiles and c_#<.

:wshada -> Save information while running nvim.
:rshada -> Restore information while running nvim.

help with session sessionoptions 

:mksession vimbook.vim -> Creates a session file.
:source vimbook.vim -> Restore session.
vim -S vimbook.vim -> Restore specific section.

session options:
  blank		keep empty windows
  buffers		all buffers, not only the ones in a window
  curdir		the current directory
  folds		folds, also manually created ones
  help		the help window
  options		all options and mappings
  tabpages	all tab pages
  winsize		window sizes
  terminal	include terminal windows

Jumping between section examples:
  :wall
  :mksession! ~/.config/nvim/secret.vim
  :source ~/.config/nvim/boring.vim

:mkview -> Create a view for the window.
:loadview -> Restore a view for the window.
[Note: You can store up to ten views for the same file this way, one unnumbered
and nine numbered 1 to 9]

:mkview ~/.config/nvim/main.vim -> Save the view of the current file.
:source ~/.config/nvim/main.vim -> Restore the view of the current file.

modeline format -> any-text vim:set {option}={value} ... : any-text  

For more details see modeline.

================================================================================
usr_22
================================================================================

This chapter introduces netwr browser. However, NvChad uses a different plugin.
See netrw-browse for more.

:cd -> changes the current directory.
:pwd -> Print working directory.
:cd - -> Get back to last directory. *
:lcd -> Change directory in a window.
:tcd -> Chenge directory in a tab.

gf -> Finds file and edit it.

The path option allows specifying the directories where to search for files
See the help on the path option.

The isfname option is used to decide which characters are included in the
file name, and which ones are not. 

:find inits.h -> Use the path to try to find the file.

To open the found file in a new window use CTRL-W f instead of gf, or use
:sfind instead of :find.

vim "+find stdio.h" -> Finds the file "stdio.h" in your value of 'path'

:hide edit two.txt -> Hiddes current buffer and edits a new one.

:buffers or :ls -> List bufferfs.

Buffer flags:
  u	Buffer is unlisted |unlisted-buffer|.
  %	Current buffer.
  #	Alternate buffer.
  a	Buffer is loaded and displayed.
  h	Buffer is loaded but hidden.
  =	Buffer is read-only.
  -	Buffer is not modifiable, the 'modifiable' option is off.
  +	Buffer has been modified.

:sbuffer 3 -> Open a buffer in a new window.

Move around the buffer list:
	:bnext ->	go to next buffer
	:bprevious ->	go to previous buffer
	:bfirst -> go to the first buffer
	:blast ->	go to the last buffer

:buffers! -> List unlisted buffers.
:bwipe -> Make nvim forget about a buffer.

================================================================================
usr_23
================================================================================

The option 'fileformats' contains the various formats that will be tried
when a new file is edited.

gf -> Open file in link. 

vim -b datafile -> Read binary characters.

:set display=uhex -> See unprintable characters in hex format.

ga -> Print the value of the character under the cursor.

:%!xxd -> Convert file to xxd format.
:%!xxd -r -> Convert file back.

[Note: Only changes in the hex part are used.  Changes in the printable text
part on the right are ignored.]

 These compression methods are currently supported:

.Z	compress
.gz	gzip
.bz2	bzip2

================================================================================
usr_24
================================================================================

<BS> -> Deletes character after the cursor
<Del> -> Deletes character before the cursor
CTRL-W -> Deletes word before the cursor
CTRL-U -> Start over in a line, removing changes before entering insert mode.

An overview of the keys you can use in Insert mode:

  <C-Home>	to start of the file
  <PageUp>	a whole screenful up
  <Home>		to start of line
  <S-Left>	one word left
  <C-Left>	one word left
  <S-Right>	one word right
  <C-Right>	one word right
  <End>		to end of the line
  <PageDown>	a whole screenful down
  <C-End>		to end of the file

There are a few more, see ins-special-special.

vim has completion, but NvChad seems to always have completion.
CTRL-P -> Completion

CTRL-P -> Previous.
CTRL-N -> Next.

The Vim editor goes through a lot of effort to find words to complete.  By
default, it searches the following places:

	1. Current file
	2. Files in other windows
	3. Other loaded files (hidden buffers)
	4. Files which are not loaded (inactive buffers)
	5. Tag files
	6. All files #included by the current file

If you know what you are looking for, you can use these commands to complete
with a certain type of item:

	CTRL-X CTRL-F		file names
	CTRL-X CTRL-L		whole lines
	CTRL-X CTRL-D		macro definitions (also in included files)
	CTRL-X CTRL-I		current and included files
	CTRL-X CTRL-K		words from a dictionary
	CTRL-X CTRL-T		words from a thesaurus
	CTRL-X CTRL-]		tags
	CTRL-X CTRL-V		Vim command line

  Doesn't seem to work in NvChad.

More information for each of these commands here: ins-completion.

CTRL-A -> Inserts the text of the previous insert.
CTRL-@ -> Does a CTRL-A and leaves insert mode.

CTRL-Y -> Inserts the character above the cursor.
CTRL-E -> Inserts the character below the cursor.

CTRL-R {register} -> Inserts the contents of a register.

:iabbrev ad advertisement -> Add an abbreviation

CTRL-V -> Insert special characters

CTRL-K -> Insertar digrafos

CTRL-K Co -> 

To find out what digraphs are available, use the following command: >
:digraphs

CTRL-O {command} -> Execute any Normal mode command from insert mode.

================================================================================
usr_25
================================================================================

:set textwidth=30 -> Automatic line break.

:set !wrap -> Disable wrapping

gq -> Gets paragraph into shape

Note: there is a way to do automatic formatting for specific types of text
layouts, see auto-format.

"gq}" formats from the cursor to the end of the current paragraph.

gqap -> Paragraph operator.

Vim is able to format more than just plain text.  See |fo-table| for how to
change this.  See the 'joinspaces' option to change the number of spaces used
after a full stop.
   It is possible to use an external program for formatting.  This is useful
if your text can't be properly formatted with Vim's builtin command.  See the
'formatprg' option.

:{range}center [width] -> Center a range of lines.
:{range}right [width] -> Justifies the text.
:{range}left [margin] -> Moves text to the left.

:packadd justify -> enables _j operator

The 'autoindent' option inserts indents automatically

If you always want spaces and no tab characters, set the 'expandtab'

For mismatched tabstop values:
  :set tabstop=3
  :retab 8
  
:set guioptions+=b -> horizontal scrollbar at the bottom of the window.

commands to scroll the text.
	zh		scroll right
	4zh		scroll four characters right
	zH		scroll half a window width right
	ze		scroll right to put the cursor at the end
	zl		scroll left
	4zl		scroll four characters left
	zL		scroll half a window width left
	zs		scroll left to put the cursor at the start
  
commands for wrap off.
  g0    to first visible character in this line
  g^    to first non-blank visible character in this line
  gm    to middle of screen line
  gM    to middle of the text in this line
  g$    to last visible character in this line

linebreak -> breaks lines at an appropriate place when displaying the line.

:g/./,/^$/join -> Turn paragrah into single line.

:g/\S/,/^\s*$/join -> For blank lines.

:set virtualedit=all -> Edit tables, no need for spaces *

B -> moves back to the start of a white space separated word.

gr" -> makes sure the new character takes the right amount of screen space.

================================================================================
usr_26
================================================================================

gv -> Selects previous visual selected area.

CTRL-A -> Increase number

CTRL-X -> Decrease number

CTRL-A and CTRL-X depends on the value of |'nrformats'|.

The ":argdo" command takes an argument that is another command.  That command
will be executed on all files in the argument list.

There is also the ":windo" command, which executes its argument in all
windows. 

I didn't quite catch the this part:
  26.4	Using Vim from a shell script.
  
================================================================================
usr_27
================================================================================

:set ignorecase -> Ignore case in searches.
:set noignorecase -> Disable ignore case.

/c -> ignore case
/C -> match case

:set nowrapscan -> Disable wrap in searches.

/default/2 -> Offset 2 lines when matching default.

/const/en -> The "e" offset indicates an offset from the end of the match.

/const/b+2 -> "b", the cursor moves to the beginning of the pattern.

//offset -> To repeat searching for the previously used search pattern.

// -> To repeat removing previously used offset.

?const?e-2 -> The "?" command uses offsets in the same way.

27.4 Matching multiple times *

/a* -> * item specifies that the item before it can match 0 or more times.
/\(ab\)* -> matches ab string o or more times.
/a+ -> + item specifies that the item before it can match 1 or more times.
\= -> Optional. folders\= => folder or folders.
/ab\{3,5} -> Matches b followed by a 3 - 5 times.

Examples:
\{,4}		0, 1, 2, 3 or 4
\{3,}		3, 4, 5, etc.
\{0,1}		0 or 1, same as \=
\{0,}		0 or more, same as *
\{1,}		1 or more, same as \+
\{3}		3

\{-n,m} -> Match as minimal as possible.

\| -> or operator. /foo\|bar
\& -> Concat

[] -> construct to match a character.
[a-z], [0123456789abcdef], [0-3].
To match the "-" character itself make it the first or last one in the range.

Special characters:
\e	<Esc>
\t	<Tab>
\r	<CR>
\b	<BS>

/"[^"]*" -> The [] item then matches everything but the characters included.

Shortcuts:
item matches                equivalent  
\a alphabetic               [a-zA-Z]
\d digit                    [0-9]
\D non-digit                [^0-9]
\x hex digit                [0-9a-fA-F]
\X non-hex digit            [^0-9a-fA-F]
\s white space              [  ]          (<Tab> and <Space>)
\S non-white characters     [^  ]         (not <Tab> and <Space>)
\l lowercase alpha          [a-z]
\L non-lowercase alpha      [^a-z]
\u uppercase alpha          [A-Z]
\U non-uppercase alpha      [^A-Z]

See |/\s| for the whole list of these ranges.

The character classes are:

item          matches                              option  
\i            identifier characters                'isident'
\I            like \i, excluding digits
\k            keyword characters                   'iskeyword'
\K            like \k, excluding digits
\p            printable characters                 'isprint'
\P            like \p, excluding digits
\f            file name characters                 'isfname'
\F            like \f, excluding digits

\n -> match line break
\_s -> match line break or space
\_s/+ -> match any amount of white space

"\_a" matches an alphabetic character or a line break.  The other character
classes and ranges can be modified in the same way by inserting a "_".

Many other items can be made to match a line break by prepending "\_".  For
example: "\_." matches any character or a line break.

Another example is "\_[]", a character range that includes a line break  

"\<" and "\>" are used to find only whole words.

================================================================================
usr_28
================================================================================

zf -> fold motion
zo -> Open fold
zc -> Close fold

zm -> Fold all
zr -> Unfold all

zM -> Fold even nested
zR -> Unfold even nested

zn -> Disable folding
zN -> Enables folding
zi -> Toggles between the two

zO -> To open all folds at the cursor line.
zC -> Close all folds at the cursor line.
zd -> Delete a fold at the cursor line.
zD -> Delete all folds at the cursor line.

:set foldopen=all -> line under the cursor always open.

:mkview -> Save views including folds.
:loadview -> Restore view.

:set foldmethod=indent -> Set fold by indent.

:set foldmethod=marker -> Uses markers, but modifies the text.

More about folding by syntax in the reference manual: fold-syntax

:set foldexpr -> Folding using expressions.

More about folding by expression in the reference manual: fold-expr

Useful when you set the diff option in the same window.  The -d option does this
for you.  Example:  

:setlocal diff foldmethod=diff scrollbind nowrap foldlevel=1

================================================================================
usr_29
================================================================================

ctags *.c -> Generate tags file

:tags -> shows the list of tags that you traversed through

:tag -> Goes to the tag on top of the list.

:stag tagname -> Open tag on a new Window.

I need to finish reading this chapter. I'm not that interested in this topic
just yet.

================================================================================
usr_30
================================================================================
Tue Dec  5 18:58:30 2023
:!make | &tee /tmp/vim215953.err 
gcc -g -Wall -o prog main.c sub.c 
main.c: In function 'main': 
main.c:6: too many arguments to function 'do_sub' 
main.c: At top level: 
main.c:10: parse error before '}' 
make: *** [prog] Error 1 

2 returned 
"main.c" 11L, 111C 
(3 of 6): too many arguments to function 'do_sub' 
Press ENTER or type command to continue 

:cnext -> Goes to where the next error occurs.

:cc -> See the whole erorr message.

:clist -> Overview of all error messages.
